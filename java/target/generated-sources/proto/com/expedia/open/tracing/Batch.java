// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: span.proto

package com.expedia.open.tracing;

/**
 * <pre>
 * You can optionally use Batch to send a collection of spans. Spans may not necessarily belong to one traceId.
 * </pre>
 *
 * Protobuf type {@code Batch}
 */
public  final class Batch extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:Batch)
    BatchOrBuilder {
  // Use Batch.newBuilder() to construct.
  private Batch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Batch() {
    spans_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Batch(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.expedia.open.tracing.Process.Builder subBuilder = null;
            if (process_ != null) {
              subBuilder = process_.toBuilder();
            }
            process_ = input.readMessage(com.expedia.open.tracing.Process.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(process_);
              process_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              spans_ = new java.util.ArrayList<com.expedia.open.tracing.Span>();
              mutable_bitField0_ |= 0x00000002;
            }
            spans_.add(
                input.readMessage(com.expedia.open.tracing.Span.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        spans_ = java.util.Collections.unmodifiableList(spans_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.expedia.open.tracing.SpanOuterClass.internal_static_Batch_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.expedia.open.tracing.SpanOuterClass.internal_static_Batch_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.expedia.open.tracing.Batch.class, com.expedia.open.tracing.Batch.Builder.class);
  }

  private int bitField0_;
  public static final int PROCESS_FIELD_NUMBER = 1;
  private com.expedia.open.tracing.Process process_;
  /**
   * <pre>
   * process identifier
   * </pre>
   *
   * <code>.Process process = 1;</code>
   */
  public boolean hasProcess() {
    return process_ != null;
  }
  /**
   * <pre>
   * process identifier
   * </pre>
   *
   * <code>.Process process = 1;</code>
   */
  public com.expedia.open.tracing.Process getProcess() {
    return process_ == null ? com.expedia.open.tracing.Process.getDefaultInstance() : process_;
  }
  /**
   * <pre>
   * process identifier
   * </pre>
   *
   * <code>.Process process = 1;</code>
   */
  public com.expedia.open.tracing.ProcessOrBuilder getProcessOrBuilder() {
    return getProcess();
  }

  public static final int SPANS_FIELD_NUMBER = 2;
  private java.util.List<com.expedia.open.tracing.Span> spans_;
  /**
   * <pre>
   * a collection of spans emitted from the process/service
   * </pre>
   *
   * <code>repeated .Span spans = 2;</code>
   */
  public java.util.List<com.expedia.open.tracing.Span> getSpansList() {
    return spans_;
  }
  /**
   * <pre>
   * a collection of spans emitted from the process/service
   * </pre>
   *
   * <code>repeated .Span spans = 2;</code>
   */
  public java.util.List<? extends com.expedia.open.tracing.SpanOrBuilder> 
      getSpansOrBuilderList() {
    return spans_;
  }
  /**
   * <pre>
   * a collection of spans emitted from the process/service
   * </pre>
   *
   * <code>repeated .Span spans = 2;</code>
   */
  public int getSpansCount() {
    return spans_.size();
  }
  /**
   * <pre>
   * a collection of spans emitted from the process/service
   * </pre>
   *
   * <code>repeated .Span spans = 2;</code>
   */
  public com.expedia.open.tracing.Span getSpans(int index) {
    return spans_.get(index);
  }
  /**
   * <pre>
   * a collection of spans emitted from the process/service
   * </pre>
   *
   * <code>repeated .Span spans = 2;</code>
   */
  public com.expedia.open.tracing.SpanOrBuilder getSpansOrBuilder(
      int index) {
    return spans_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (process_ != null) {
      output.writeMessage(1, getProcess());
    }
    for (int i = 0; i < spans_.size(); i++) {
      output.writeMessage(2, spans_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (process_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getProcess());
    }
    for (int i = 0; i < spans_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, spans_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.expedia.open.tracing.Batch)) {
      return super.equals(obj);
    }
    com.expedia.open.tracing.Batch other = (com.expedia.open.tracing.Batch) obj;

    boolean result = true;
    result = result && (hasProcess() == other.hasProcess());
    if (hasProcess()) {
      result = result && getProcess()
          .equals(other.getProcess());
    }
    result = result && getSpansList()
        .equals(other.getSpansList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasProcess()) {
      hash = (37 * hash) + PROCESS_FIELD_NUMBER;
      hash = (53 * hash) + getProcess().hashCode();
    }
    if (getSpansCount() > 0) {
      hash = (37 * hash) + SPANS_FIELD_NUMBER;
      hash = (53 * hash) + getSpansList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.expedia.open.tracing.Batch parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.expedia.open.tracing.Batch parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.expedia.open.tracing.Batch parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.expedia.open.tracing.Batch parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.expedia.open.tracing.Batch parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.expedia.open.tracing.Batch parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.expedia.open.tracing.Batch prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * You can optionally use Batch to send a collection of spans. Spans may not necessarily belong to one traceId.
   * </pre>
   *
   * Protobuf type {@code Batch}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:Batch)
      com.expedia.open.tracing.BatchOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.expedia.open.tracing.SpanOuterClass.internal_static_Batch_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.expedia.open.tracing.SpanOuterClass.internal_static_Batch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.expedia.open.tracing.Batch.class, com.expedia.open.tracing.Batch.Builder.class);
    }

    // Construct using com.expedia.open.tracing.Batch.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSpansFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (processBuilder_ == null) {
        process_ = null;
      } else {
        process_ = null;
        processBuilder_ = null;
      }
      if (spansBuilder_ == null) {
        spans_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        spansBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.expedia.open.tracing.SpanOuterClass.internal_static_Batch_descriptor;
    }

    public com.expedia.open.tracing.Batch getDefaultInstanceForType() {
      return com.expedia.open.tracing.Batch.getDefaultInstance();
    }

    public com.expedia.open.tracing.Batch build() {
      com.expedia.open.tracing.Batch result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.expedia.open.tracing.Batch buildPartial() {
      com.expedia.open.tracing.Batch result = new com.expedia.open.tracing.Batch(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (processBuilder_ == null) {
        result.process_ = process_;
      } else {
        result.process_ = processBuilder_.build();
      }
      if (spansBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          spans_ = java.util.Collections.unmodifiableList(spans_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.spans_ = spans_;
      } else {
        result.spans_ = spansBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.expedia.open.tracing.Batch) {
        return mergeFrom((com.expedia.open.tracing.Batch)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.expedia.open.tracing.Batch other) {
      if (other == com.expedia.open.tracing.Batch.getDefaultInstance()) return this;
      if (other.hasProcess()) {
        mergeProcess(other.getProcess());
      }
      if (spansBuilder_ == null) {
        if (!other.spans_.isEmpty()) {
          if (spans_.isEmpty()) {
            spans_ = other.spans_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSpansIsMutable();
            spans_.addAll(other.spans_);
          }
          onChanged();
        }
      } else {
        if (!other.spans_.isEmpty()) {
          if (spansBuilder_.isEmpty()) {
            spansBuilder_.dispose();
            spansBuilder_ = null;
            spans_ = other.spans_;
            bitField0_ = (bitField0_ & ~0x00000002);
            spansBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSpansFieldBuilder() : null;
          } else {
            spansBuilder_.addAllMessages(other.spans_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.expedia.open.tracing.Batch parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.expedia.open.tracing.Batch) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.expedia.open.tracing.Process process_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.expedia.open.tracing.Process, com.expedia.open.tracing.Process.Builder, com.expedia.open.tracing.ProcessOrBuilder> processBuilder_;
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public boolean hasProcess() {
      return processBuilder_ != null || process_ != null;
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public com.expedia.open.tracing.Process getProcess() {
      if (processBuilder_ == null) {
        return process_ == null ? com.expedia.open.tracing.Process.getDefaultInstance() : process_;
      } else {
        return processBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public Builder setProcess(com.expedia.open.tracing.Process value) {
      if (processBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        process_ = value;
        onChanged();
      } else {
        processBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public Builder setProcess(
        com.expedia.open.tracing.Process.Builder builderForValue) {
      if (processBuilder_ == null) {
        process_ = builderForValue.build();
        onChanged();
      } else {
        processBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public Builder mergeProcess(com.expedia.open.tracing.Process value) {
      if (processBuilder_ == null) {
        if (process_ != null) {
          process_ =
            com.expedia.open.tracing.Process.newBuilder(process_).mergeFrom(value).buildPartial();
        } else {
          process_ = value;
        }
        onChanged();
      } else {
        processBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public Builder clearProcess() {
      if (processBuilder_ == null) {
        process_ = null;
        onChanged();
      } else {
        process_ = null;
        processBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public com.expedia.open.tracing.Process.Builder getProcessBuilder() {
      
      onChanged();
      return getProcessFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    public com.expedia.open.tracing.ProcessOrBuilder getProcessOrBuilder() {
      if (processBuilder_ != null) {
        return processBuilder_.getMessageOrBuilder();
      } else {
        return process_ == null ?
            com.expedia.open.tracing.Process.getDefaultInstance() : process_;
      }
    }
    /**
     * <pre>
     * process identifier
     * </pre>
     *
     * <code>.Process process = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.expedia.open.tracing.Process, com.expedia.open.tracing.Process.Builder, com.expedia.open.tracing.ProcessOrBuilder> 
        getProcessFieldBuilder() {
      if (processBuilder_ == null) {
        processBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.expedia.open.tracing.Process, com.expedia.open.tracing.Process.Builder, com.expedia.open.tracing.ProcessOrBuilder>(
                getProcess(),
                getParentForChildren(),
                isClean());
        process_ = null;
      }
      return processBuilder_;
    }

    private java.util.List<com.expedia.open.tracing.Span> spans_ =
      java.util.Collections.emptyList();
    private void ensureSpansIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        spans_ = new java.util.ArrayList<com.expedia.open.tracing.Span>(spans_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.expedia.open.tracing.Span, com.expedia.open.tracing.Span.Builder, com.expedia.open.tracing.SpanOrBuilder> spansBuilder_;

    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public java.util.List<com.expedia.open.tracing.Span> getSpansList() {
      if (spansBuilder_ == null) {
        return java.util.Collections.unmodifiableList(spans_);
      } else {
        return spansBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public int getSpansCount() {
      if (spansBuilder_ == null) {
        return spans_.size();
      } else {
        return spansBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public com.expedia.open.tracing.Span getSpans(int index) {
      if (spansBuilder_ == null) {
        return spans_.get(index);
      } else {
        return spansBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder setSpans(
        int index, com.expedia.open.tracing.Span value) {
      if (spansBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpansIsMutable();
        spans_.set(index, value);
        onChanged();
      } else {
        spansBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder setSpans(
        int index, com.expedia.open.tracing.Span.Builder builderForValue) {
      if (spansBuilder_ == null) {
        ensureSpansIsMutable();
        spans_.set(index, builderForValue.build());
        onChanged();
      } else {
        spansBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder addSpans(com.expedia.open.tracing.Span value) {
      if (spansBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpansIsMutable();
        spans_.add(value);
        onChanged();
      } else {
        spansBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder addSpans(
        int index, com.expedia.open.tracing.Span value) {
      if (spansBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpansIsMutable();
        spans_.add(index, value);
        onChanged();
      } else {
        spansBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder addSpans(
        com.expedia.open.tracing.Span.Builder builderForValue) {
      if (spansBuilder_ == null) {
        ensureSpansIsMutable();
        spans_.add(builderForValue.build());
        onChanged();
      } else {
        spansBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder addSpans(
        int index, com.expedia.open.tracing.Span.Builder builderForValue) {
      if (spansBuilder_ == null) {
        ensureSpansIsMutable();
        spans_.add(index, builderForValue.build());
        onChanged();
      } else {
        spansBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder addAllSpans(
        java.lang.Iterable<? extends com.expedia.open.tracing.Span> values) {
      if (spansBuilder_ == null) {
        ensureSpansIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, spans_);
        onChanged();
      } else {
        spansBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder clearSpans() {
      if (spansBuilder_ == null) {
        spans_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        spansBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public Builder removeSpans(int index) {
      if (spansBuilder_ == null) {
        ensureSpansIsMutable();
        spans_.remove(index);
        onChanged();
      } else {
        spansBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public com.expedia.open.tracing.Span.Builder getSpansBuilder(
        int index) {
      return getSpansFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public com.expedia.open.tracing.SpanOrBuilder getSpansOrBuilder(
        int index) {
      if (spansBuilder_ == null) {
        return spans_.get(index);  } else {
        return spansBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public java.util.List<? extends com.expedia.open.tracing.SpanOrBuilder> 
         getSpansOrBuilderList() {
      if (spansBuilder_ != null) {
        return spansBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(spans_);
      }
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public com.expedia.open.tracing.Span.Builder addSpansBuilder() {
      return getSpansFieldBuilder().addBuilder(
          com.expedia.open.tracing.Span.getDefaultInstance());
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public com.expedia.open.tracing.Span.Builder addSpansBuilder(
        int index) {
      return getSpansFieldBuilder().addBuilder(
          index, com.expedia.open.tracing.Span.getDefaultInstance());
    }
    /**
     * <pre>
     * a collection of spans emitted from the process/service
     * </pre>
     *
     * <code>repeated .Span spans = 2;</code>
     */
    public java.util.List<com.expedia.open.tracing.Span.Builder> 
         getSpansBuilderList() {
      return getSpansFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.expedia.open.tracing.Span, com.expedia.open.tracing.Span.Builder, com.expedia.open.tracing.SpanOrBuilder> 
        getSpansFieldBuilder() {
      if (spansBuilder_ == null) {
        spansBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.expedia.open.tracing.Span, com.expedia.open.tracing.Span.Builder, com.expedia.open.tracing.SpanOrBuilder>(
                spans_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        spans_ = null;
      }
      return spansBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:Batch)
  }

  // @@protoc_insertion_point(class_scope:Batch)
  private static final com.expedia.open.tracing.Batch DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.expedia.open.tracing.Batch();
  }

  public static com.expedia.open.tracing.Batch getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Batch>
      PARSER = new com.google.protobuf.AbstractParser<Batch>() {
    public Batch parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new Batch(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Batch> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Batch> getParserForType() {
    return PARSER;
  }

  public com.expedia.open.tracing.Batch getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

