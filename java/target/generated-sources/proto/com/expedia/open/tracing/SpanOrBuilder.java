// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: span.proto

package com.expedia.open.tracing;

public interface SpanOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Span)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique trace id
   * </pre>
   *
   * <code>string traceId = 1;</code>
   */
  java.lang.String getTraceId();
  /**
   * <pre>
   * unique trace id
   * </pre>
   *
   * <code>string traceId = 1;</code>
   */
  com.google.protobuf.ByteString
      getTraceIdBytes();

  /**
   * <pre>
   * unique span id
   * </pre>
   *
   * <code>string spanId = 2;</code>
   */
  java.lang.String getSpanId();
  /**
   * <pre>
   * unique span id
   * </pre>
   *
   * <code>string spanId = 2;</code>
   */
  com.google.protobuf.ByteString
      getSpanIdBytes();

  /**
   * <pre>
   * optional, a span can have its parent spanId
   * </pre>
   *
   * <code>string parentSpanId = 3;</code>
   */
  java.lang.String getParentSpanId();
  /**
   * <pre>
   * optional, a span can have its parent spanId
   * </pre>
   *
   * <code>string parentSpanId = 3;</code>
   */
  com.google.protobuf.ByteString
      getParentSpanIdBytes();

  /**
   * <pre>
   * name of operation
   * </pre>
   *
   * <code>string operationName = 4;</code>
   */
  java.lang.String getOperationName();
  /**
   * <pre>
   * name of operation
   * </pre>
   *
   * <code>string operationName = 4;</code>
   */
  com.google.protobuf.ByteString
      getOperationNameBytes();

  /**
   * <pre>
   * creation time of this span in milliseconds from epoch
   * </pre>
   *
   * <code>int64 startTime = 5;</code>
   */
  long getStartTime();

  /**
   * <pre>
   * span duration in milliseconds
   * </pre>
   *
   * <code>int64 duration = 6;</code>
   */
  long getDuration();

  /**
   * <pre>
   * arbitrary set of timestamp-aware key-value pairs
   * </pre>
   *
   * <code>repeated .Log logs = 7;</code>
   */
  java.util.List<com.expedia.open.tracing.Log> 
      getLogsList();
  /**
   * <pre>
   * arbitrary set of timestamp-aware key-value pairs
   * </pre>
   *
   * <code>repeated .Log logs = 7;</code>
   */
  com.expedia.open.tracing.Log getLogs(int index);
  /**
   * <pre>
   * arbitrary set of timestamp-aware key-value pairs
   * </pre>
   *
   * <code>repeated .Log logs = 7;</code>
   */
  int getLogsCount();
  /**
   * <pre>
   * arbitrary set of timestamp-aware key-value pairs
   * </pre>
   *
   * <code>repeated .Log logs = 7;</code>
   */
  java.util.List<? extends com.expedia.open.tracing.LogOrBuilder> 
      getLogsOrBuilderList();
  /**
   * <pre>
   * arbitrary set of timestamp-aware key-value pairs
   * </pre>
   *
   * <code>repeated .Log logs = 7;</code>
   */
  com.expedia.open.tracing.LogOrBuilder getLogsOrBuilder(
      int index);

  /**
   * <pre>
   * arbitrary set of key-value pairs
   * </pre>
   *
   * <code>repeated .Tag tags = 8;</code>
   */
  java.util.List<com.expedia.open.tracing.Tag> 
      getTagsList();
  /**
   * <pre>
   * arbitrary set of key-value pairs
   * </pre>
   *
   * <code>repeated .Tag tags = 8;</code>
   */
  com.expedia.open.tracing.Tag getTags(int index);
  /**
   * <pre>
   * arbitrary set of key-value pairs
   * </pre>
   *
   * <code>repeated .Tag tags = 8;</code>
   */
  int getTagsCount();
  /**
   * <pre>
   * arbitrary set of key-value pairs
   * </pre>
   *
   * <code>repeated .Tag tags = 8;</code>
   */
  java.util.List<? extends com.expedia.open.tracing.TagOrBuilder> 
      getTagsOrBuilderList();
  /**
   * <pre>
   * arbitrary set of key-value pairs
   * </pre>
   *
   * <code>repeated .Tag tags = 8;</code>
   */
  com.expedia.open.tracing.TagOrBuilder getTagsOrBuilder(
      int index);
}
