/*
 *
 *  Copyright 2017 Expedia, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */
syntax = "proto3";
import "span.proto";

option java_package = "com.expedia.open.tracing.api";
option java_multiple_files = true;

// collection of spans belonging to a single Trace
message Trace {
    string traceId              = 1;
    repeated Span childSpans    = 2;
}

// request for fetching Trace for traceId
message TraceRequest {
    string traceId = 1;
}

// request for fetching span for givve traceId and spanId
message SpanRequest {
    string traceId = 1;
    string spanId  = 2;
}

// criteria for searching traces
message TracesSearchRequest {
    repeated Field fields   = 1; // fields to filter traces
    int64 startTime         = 2; // search window start time in microseconds time from epoch
    int64 endTime           = 3; // search window end time in microseconds time from epoch
    int32 limit             = 4; // limit on number of results to return
}

// list of filtered traces
message TracesSearchResult {
    repeated Trace traces   = 1;
}

// Field is a general abstraction on data associated with a span
// It can represent any indexed span attribute such as tag, log, spanName, or operationName
message Field {
    string name     = 1;          // name of the field
    string value    = 2;          // value of the field
}

// An empty message type for rq/rs
message Empty {}

// query for fetching values for given field
message FieldValuesRequest {
    string fieldName         = 1; // name of field to query for
    repeated Field filters   = 2; // provided fields to be used for filtering
}

message FieldNames {
    repeated string names = 1;
}

message FieldValues {
    repeated string values = 1;
}

// service interface to search and get traces
service TraceReader {
    rpc searchTraces (TracesSearchRequest) returns (TracesSearchResult);    // search for traces based on filter fields and other criterias
    rpc getTrace (TraceRequest) returns (Trace);                            // fetch a trace using traceId
    rpc getRawTrace (TraceRequest) returns (Trace);                         // fetch a trace in raw un-transformed format using traceId
    rpc getRawSpan (SpanRequest) returns (Span);                            // fetch a span of a trace in raw un-transformed format using traceId and spanId
    rpc getFieldNames (Empty) returns (FieldNames);                         // get all searchable Fields available in haystack system
    rpc getFieldValues (FieldValuesRequest) returns (FieldValues);          // get values for a given Field
}
