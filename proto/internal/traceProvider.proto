/*
 *
 *  Copyright 2017 Expedia, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */
syntax = "proto3";
import "span.proto";
import "field.proto";

option java_package = "com.expedia.open.tracing.internal";
option java_multiple_files = true;

// collection of spans belonging to a single Trace
message Trace {
    string traceId              = 1;
    repeated Span childSpans    = 2;
}

// request for fetching Trace for traceId
message TraceRequest {
    string traceId = 1;
}

// request for fetching span for givve traceId and spanId
message SpanRequest {
    string traceId = 1;
    string spanId  = 2;
}

// criteria for searching traces
message TracesSearchRequest {
    string serviceName      = 1; // service through which trace must go through
    string operationName    = 2; // operation through which trace must go through. Do not provide if searching for all operation of a given service.
    repeated Field fields   = 3; // fields to filter traces
    int64 startTime         = 4; // search window start time in milliseconds time from epoch
    int64 endTime           = 5; // search window end time in milliseconds time from epoch
    int64 minDuration       = 6; // minimum duration for trace/span
    int64 maxDuration       = 7; // maximum duration for trace/span
    int32 limit             = 8; // limit on number of results to return
}

// list of filtered traces
message TracesSearchResult {
    repeated Trace traces   = 1;
}

// service interface to search and get traces
service TraceProvider {
    rpc searchTraces (TracesSearchRequest) returns (TracesSearchResult);    // search for traces based on filter fields and other criterias
    rpc getTrace (TraceRequest) returns (Trace);                            // fetch a trace using traceId
    rpc getRawTrace (TraceRequest) returns (Trace);                         // fetch a trace in raw un-transformed format using traceId
    rpc getRawSpan (SpanRequest) returns (Span);                            // fetch a span of a trace in raw un-transformed format using traceId and spanId
}
